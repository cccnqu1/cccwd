# 計算理論簡介

計算理論是資訊科學的理論基礎，主要探討電腦能力極限的問題，哪些是電腦有可能解決的問題，哪些是電腦無法解決的問題，以下是計算理論的兩大問題：

* 哪些問題是可計算的？ (What can be computed?)
* 計算該問題需要花費多少時間與空間？ (Given a problem, how much resource do we need to compute it ?)

計算理論有一些子領域，像是自動推論領域，探討的就是如何利用電腦證明數學定理。(Prove mathematical theorem using computer) ， 但是這個問題其實不像我們想像的那麼狹窄，廣義的來看，自動推論問題其實就是在探究如何利用電腦解決問題 (Computer-based problem solving)。

舉例而言，以下是一些邏輯規則，

$\forall x \forall y \forall z\quad x \cdot (y \cdot z) = (x \cdot y)\cdot z$

$\exists x \exists y \quad x \cdot y = y$

說明：以上形式中的前面部份，是一階邏輯中的量詞限制條件，而內容部份的寫法則通常可以用下列形式表達。

$A_1 \wedge  ... \wedge  A_n \rightarrow  P_1 \wedge  ... \wedge  P_n$

在自動推論中，經常使用某些公理系統，作為推論的基本法則，這些公理系統必須具備「一致性」(consistent)，不能有邏輯矛盾的情況出現。計算機科學家必須研究如何利用這些公理証明所有可證明的定理，這幾乎就是在研究電腦能力的極限了。

## 邏輯推論系統

為了討論電腦的能力極限，我們往往需要藉助邏輯系統來進行描述，以下是經典邏輯系統所探討的主題，也是很多計算理論書籍的切入點。

* 邏輯系統：布林邏輯 (Boolean Logic)、謂詞邏輯 (Predicate Logic)、一階邏輯 (First Order Logic)、哥德爾完備定律、哥德爾不完備定律。

為了讓讀者感受到「邏輯與計算理論之間的關係」，請讀者先看看以下這個「皮諾公設系統」 (Peano Axiom of Natural Number System)，這是一個「數論」領域的簡單公理系統。

> PE1 : 0 exist
> 
> PE2 : x' = x+1
> 
> PE3 : x' > x
> 
> PE4 : if x' = y' then x = y
> 
> PE5 : (數學歸納法)  if P(0) and P(x) => P(x') then $\forall x \quad P(x)$


您可以看到上述的的公理系統都是採用邏輯的方式描述的，我們可以透過數學思考去解析這類的公理系統，以變理解該「數學系統的能力極限」，而這也正是計算理論課程所想要探討的主題。

計算理論與演算法所探討的，可以說是一體兩面的東西。演算法探討用電腦解決問題的方法，但計算理論則注重電腦是否能解決該問題，或者能否在有限的時間內解決某問題。

以計算理論的角度看來，演算法所做的事情是：「尋找一個程式，該程式可以正確的輸出某個問題的答案」。如果我們將該問題改寫成邏輯數學式，則可以寫成如下的語句。

$\forall x \quad p(x) \rightarrow  \exists z \quad q(x,z)$

上述語句中的 p(x) 是「輸入限制函數」，而 q(x,z) 則是「輸出限制函數」。

## 哪些問題是可計算的？

在還沒有電腦的時代，哥德爾、圖靈等數學家就已經用數學在討論電腦能力的極限了。

在 1900 年的時候，數學大師希爾伯特就提出 20 世紀待解決的 23 個數學問題，其中第二題是希望能解決「算術公理之相容性」的問題，也就是探討「數學公理系統是否一致且完備」的問題，這個問題在當時並無法解答。

希爾伯特本人並沒有在這個問題上取得多少進展，但是在 1929 年的時候，哥德爾證明了一階邏輯系統的完備性，這是一個非常重要的結果，後來這個證明被稱為「哥德爾完備定理」。

「哥德爾完備定理」證明了像「一階邏輯」這麼強大的系統都可以是一致且完備的，因此整個數學體系可計算化的目標似乎就近在眼前了，但接下來的發展卻令人感到驚訝。

「哥德爾」繼續研究「一階邏輯延伸系統」的完備性，他將「皮諾數論系統」加了進來，結果卻發現這個小小的延伸卻無法同時具有「一致性與完備性」。

更重要的是，「哥德爾」很嚴格的證明了這件事情「絕對不可能」。換句話說，如果「一階邏加上皮諾數論系統」所形成的數學體系，如果是完備的，那麼就會產生矛盾 (不一致)。 

這個結果說明了一件事，那就是「夠強大的數學系統中必然有些定理是無法透過計算推論程序去證明的」，這個結論後來被稱為「哥德爾不完備定理」。

於是、「哥德爾」摧毀了「希爾伯特」的夢想，並且宣告了「數學系統公理化」只能到此為止了。

後來、圖靈開始研究「計算機」能力的極限，結果發現「停止問題」是不可能被電腦百分之百正確判定的，因而為電腦的能力劃下了一道難以踰越的無形邊界。

圖靈和哥德爾兩人，分別從「電腦」與「數學」領域出發，但是卻得到了非常類似的結論，那就是「足夠強大的系統，必然有些事情做不到」。

這讓我想起一個奇特的論證，該論證如下：

> 有個具有虔誠信仰的教徒說：「上帝是無所不能的」，於是乎有人問了一個問題。
> 
> 「那麼、上帝是否能夠創造出一顆石頭、重到讓他自己舉不起來呢？」

當然、這樣的問題牽涉到重力，其實問的還不夠好。且讓我們改用數學的角度來問這個問題：

> 「上帝是否能夠設計出一個數學問題，困難到讓他自己解不出來呢？」

## 參考文獻

* [Wikipedia:希爾伯特的23個問題](http://zh.wikipedia.org/zh-tw/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E7%9A%8423%E4%B8%AA%E9%97%AE%E9%A2%98)

