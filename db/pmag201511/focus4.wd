## Rubi JIT 編譯器的 parser

Rubi JIT compiler 的 parser 函數，理所當然地應該在 [parser.c](https://github.com/embedded2015/rubi/blob/master/parser.c) 這個檔案中，但是當我看到這個函數時，著實愣了一下，到底剖析動作的程式碼在哪裡呢？

```CPP
int32_t parser()
{
    tok.pos = ntvCount = 0;
    strings.addr = calloc(0xFF, sizeof(int32_t));
    uint32_t main_address;
    emit(0xe9); main_address = ntvCount; emitI32(0);
    eval(0, 0);

    uint32_t addr = getFunc("main")->address;
    emitI32Insert(addr - 5, main_address);

    for (strings.addr--; strings.count; strings.addr--) {
        emitI32Insert((uint32_t) &ntvCode[ntvCount], *strings.addr);
        replaceEscape(strings.text[--strings.count]);
        for (int32_t i = 0; strings.text[strings.count][i]; i++)
            emit(strings.text[strings.count][i]);
        emit(0); // '\0'
    }

    return 1;
}
```

看到這裡我著實楞了一下，到底這個函數哪裡有作 parse 的動作呢？

後來發現 eval(0, 0) 這行著實透露了一些詭異的感覺，追進去才知道原來真正的 parse 在這裡。

```CPP
static int eval(int pos, int status)
{
    while (tok.pos < tok.size)
        if (expression(pos, status)) return 1;
    return 0;
}
```

這一行會去對每一個陳述式 expression 作運算，但到底什麼是 expression 呢？

讓我們繼續追下去。

函數 expression() 幾乎涵蓋了所有第一層結構的語法，包含指定 assignment(), def 開頭的函數 functionStmt(), 標準函數呼叫 printf(), 輸出函數 puts(), output(), 以及 for, while, if, else, elsif, break, end 等語句。

函數 expression() 對這些第一層結構進行剖析並產生 JIT 機器碼，因此 eval(0, 0) 這個函數幾乎完成了 Rubi JIT compiler 的主要動作。

```CPP
int expression(int pos, int status)
{
    int isputs = 0;

    if (skip("$")) { // global varibale?
        if (isassign()) assignment();
    } else if (skip("def")) {
        functionStmt();
    } else if (functions.inside == IN_GLOBAL &&
               strcmp("def", tok.tok[tok.pos+1].val) &&
               strcmp("$", tok.tok[tok.pos+1].val) &&
               strcmp(";", tok.tok[tok.pos+1].val)) { // main function entry
        functions.inside = IN_FUNC;
        nowFunc++;
        appendFunc("main", ntvCount, 0); // append function
        emit(0x50 + EBP); // push ebp
        emit(0x89); emit(0xc0 + ESP * 8 + EBP); // mov ebp esp
        uint32_t espBgn = ntvCount + 2;
        emit(0x81); emit(0xe8 + ESP); emitI32(0); // sub esp 0
        emit(0x8b); emit(0x75); emit(0x0c); // mov esi, 0xc(%ebp)

        eval(0, NON);

        emit(0x81); emit(0xc4);
        emitI32(sizeof(int32_t) * (varSize[nowFunc] + 6)); // add %esp nn
        emit(0xc9);// leave
        emit(0xc3);// ret
        emitI32Insert(sizeof(int32_t) * (varSize[nowFunc] + 6), espBgn);
        functions.inside = IN_GLOBAL;
    } else if (isassign()) {
        assignment();
    } else if ((isputs = skip("puts")) || skip("output")) {
        do {
            int isstring = 0;
            if (skip("\"")) {
                emit(0xb8); getString(); emitI32(0x00);
                    // mov eax string_address
                isstring = 1;
            } else {
                relExpr();
            }
            emit(0x50 + EAX); // push eax
            if (isstring) {
                emit(0xff); emit(0x56); emit(4);// call *0x04(esi) putString
            } else {
                emit(0xff); emit(0x16); // call (esi) putNumber
            }
            emit(0x81); emit(0xc0 + ESP); emitI32(4); // add esp 4
        } while (skip(","));
        /* new line ? */
        if (isputs) {
            emit(0xff); emit(0x56); emit(8);// call *0x08(esi) putLN
        }
    } else if(skip("printf")) {
        if (skip("\"")) {
            emit(0xb8); getString(); emitI32(0x00); // mov eax string_address
            emit(0x89); emit(0x44); emit(0x24); emit(0x00); // mov [esp+0], eax
        }
        if (skip(",")) {
            uint32_t a = 4;
            do {
                relExpr();
                emit(0x89); emit(0x44); emit(0x24); emit(a); // mov [esp+a], eax
                a += 4;
            } while(skip(","));
        }
        emit(0xff); emit(0x56); emit(12 + 8); // call printf
    } else if (skip("for")) {
        assignment();
        skip(",");
        whileStmt();
    } else if (skip("while")) {
        whileStmt();
    } else if(skip("return")) {
        appendReturn();
    } else if(skip("if")) {
        ifStmt();
    } else if(skip("else")) {
        int32_t end;
        emit(0xe9); end = ntvCount; emitI32(0);// jmp while end
        emitI32Insert(ntvCount - pos - 4, pos);
        eval(end, NON);
        return 1;
    } else if (skip("elsif")) {
        int32_t endif, end;
        emit(0xe9); endif = ntvCount; emitI32(0);// jmp while end
        emitI32Insert(ntvCount - pos - 4, pos);
        relExpr(); /* if condition */
        emit(0x83); emit(0xf8); emit(0x00);// cmp eax, 0
        emit(0x75); emit(0x05); // jne 5
        emit(0xe9); end = ntvCount; emitI32(0);// jmp while end
        eval(end, NON);
        emitI32Insert(ntvCount - endif - 4, endif);
        return 1;
    } else if (skip("break")) {
        appendBreak();
    } else if (skip("end")) {
        if (status == NON) {
            emitI32Insert(ntvCount - pos - 4, pos);
        } else if (status == BLOCK_FUNC) functions.inside = IN_GLOBAL;
        return 1;
    } else if (!skip(";")) { relExpr(); }

    return 0;
}
```

至此，整個程式的大架構已然浮出水面了，但是細節則還有待研究！

Rubi JIT compiler 的 parser 採用的是遞迴下降 （recursive descendent) 式的剖析法，筆者對這部份比較沒有疑問，但是對於 JIT 的機器碼產生部份，則是問題一堆了。

接著就讓我們繼續來研究 Rubi JIT compile 的機器碼產生原理吧！

