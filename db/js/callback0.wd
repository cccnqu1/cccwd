# 匿名函數與回呼

## 函數的宣告

在 JavaScript 當中，函數的宣告方法大致有兩種，第一種的宣告方法就和一般程式語言 (C/C++, Python, Java) 等差不多，是採用 f(a,b,c...) 這種方式宣告的，但是必須在前面加上 function 這個關鍵字。

在以下範例中， sub(a,b) 就是採用這種方式宣告的一個範例。

檔案：function.js

```javascript
// 第一種寫法，直接宣告函數
function sub(a,b) {         
  return a-b;
}

// 第二種寫法，將匿名函數指定給變數。
var add = function(a,b) {     
  return a+b;
}
console.log("add(3,5)=", add(3,5), " sub(7,2)=", sub(7,2));
```

執行結果：

```
D:\js\code>node function.js
add(3,5)= 8  sub(7,2)= 5
```

但是、在 JavaScript 當中，還有一種比較特別函數宣告方式，是在宣告了一個「匿名函數」之後，再把這個函數「塞給」一個變數。就像上述的 `var add = function(a,b) ...` 的做法，這樣我們就可以用 add(3,5) 這樣的方式去呼叫該函數了。

## 參數的傳遞

有些人說，javascript 傳遞參數都是採用傳值的方式，這種說法雖然不能說錯，但必須注意一件事。

對於基礎型態，像是數值、布林值等等，是採用傳值的方式，也就是複製一份之後再傳給函數，但是對於像陣列、物件、字串等等，雖然也是複製一份傳給函數，但是複製的卻是其指標，因此對於這些復合結構的物件而言，說白了就是採用傳參照的方式。

參考： <http://heyyou.logdown.com/posts/145054>

## 函數型態的參數

在上面的 add 範例中，我們將「函數」塞給一個變數，而且還可以直接把該變數當作函數來呼叫。

那麼、我們能不能將函數當作參數來傳遞呢？ 

關於這點、當然是可以的，以下是一個將「函數當作參數」的範例。

檔案： fptr

```javascript
function sub(a,b) {         
  return a-b;
}

function f5(f, a) {
  return f(a, 5);
}

console.log("sub(8,5)="+sub(8, 5));
console.log("f5(sub,8)="+f5(sub,8));
```

執行結果

```
D:\Dropbox\Public\web\js\code>node fptr
sub(8,5)=3
f5(sub,8)=3
```

您可以看到，函數 `f5(f, a)` 的參數 f，其實又是一個函數，因為我們在 f(a,5) 當中把 f 當作函數來呼叫。

所以、當我們呼叫 f5(sub, 8) 的時候，該函數會傳回 3，因為當我們將 f5(sub, 8) 內容中的 f 取代為 sub，而 a 取代為 8 時，就會發現 return 語句的 f(a,5) 其實就是 sub(8,5)，所以當然就會傳回 3 囉！

## 呼叫不特定函數

既然可以將函數當成參數傳入，那麼我們就可以設計一個如下的 run 函數，該函數在執行完待呼叫函數 f 之後，再把執行結果印出來。

檔案： @[[run.js]](code/run.js)

```
function run(f, x) {
  var fx = f(x);
  console.log("f(x)="+fx);
}

run(Math.sin, Math.PI/4);
```

執行結果

```
D:\Dropbox\cccweb\db\js\code>node run.js
f(x)=0.7071067811865475
```

## 套用函數在陣列中的每個元素上

透過將函數傳入的方式，我們也可以設計出處理陣列中每個元素的高階函數，舉例而言，以下的 each 函數就是一個範例。

檔案： @[[each.js]](code/each.js)

```
function each(a, f) {
  for (var i in a) {
    f(a[i]);
  }
}

each([3,4,5,6], console.log);

function sinPrint(x) {
  console.log("sin(%d)=%d", x, Math.sin(x));
}

each([3,4,5,6], sinPrint);
```

執行結果

```
D:\Dropbox\cccweb\db\js\code>node each.js
3
4
5
6
sin(3)=0.1411200080598672
sin(4)=-0.7568024953079282
sin(5)=-0.9589242746631385
sin(6)=-0.27941549819892586
```

我們也可以設計出如下的 map 函數將整個陣列套用函數後轉換成另一個陣列。

檔案： @[[map.js]](code/map.js)

```
var c = console;

function map(f, a) {
  var ma = [];
  for (var i in a) {
    ma.push(f(a[i]));
  }
  return ma;
}

function square(x) {
  return x*x;
}

c.log("map(x^2, [3, 1, 5, 4, 2])="+map(square, [3,1,5,4,2]));
c.log("map(sin(x), [3, 1, 5, 4, 2])="+map(Math.sin, [3,1,5,4,2]));
```

執行結果

```
D:\Dropbox\cccweb\db\js\code>node map.js
map(x^2, [3, 1, 5, 4, 2])=9,1,25,16,4
map(sin(x), [3, 1, 5, 4, 2])=0.1411200080598672,0.8414709848078965,-0.9589242746
631385,-0.7568024953079282,0.9092974268256817
```

## 回呼 (callback)

既然可以將函數當成參數傳入，那麼我們就可以將某個函數傳入，等到某些動作執行完成之後再呼叫該函數，這種方法就稱為回呼 Callback 。

在 node.js 或網頁中，我們常常需要在輸出入動作完成後進行回呼，或者是在某些適當的時機去執行某些函數，這些都可以採用上述的回呼技術來設計。

