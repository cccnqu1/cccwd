# 邏輯語 BNF 逐條解析

* selbri : predicate relation
 * Definition: x2 (text) is a predicate relationship with relation x1 among arguments x3 (ordered set).
* sumti: x1 is a/the argument of predicate/function x2 filling place x3 (kind/number).
* prenex : 
* zo'o : attitudinal modifier: humorously - dully - seriously.
* bridi : predicate, x1 (du'u) is a predicate relationship with relation x2 among arguments (sequence/set) x3.
* elide : http://www.wordsense.eu/elide/
 * To leave out or omit (something)
* tanru : x1 is a binary metaphor formed with x2 modifying x3, giving meaning x4 in usage/instance x5.
 * Notes: (x2 and x3 are both text or both si'o concept) See also gismu, smuni.
* bo : 參考 https://lojban.github.io/cll/5/3/

text<0> = [NAI ...] [CMENE ... # | (indicators & free ...)] [joik-jek] text-1

text-1<2> = [(I [jek | joik] [[stag] BO] #) ... | NIhO ... #] [paragraphs]

paragraphs<4> = paragraph [NIhO ... # paragraphs]

paragraph<10> = (statement | fragment) [I # [statement | fragment]] ...

// 陳述 = 句子 .i 連接詞 句子
statement<11> = statement-1 | prenex statement

statement-1<12> = statement-2 [I joik-jek [statement-2]] ...

statement-2<13> = statement-3 [I [jek | joik] [stag] BO # [statement-2]]

// 陳述 = 句子 | tu'e 文章 tu'u = 句子 | "文章"
statement-3<14> = sentence | [tag] TUhE # text-1 /TUhU#/

// 片斷 = 
fragment<20> = ek # | gihek # | quantifier | NA # | terms /VAU#/ | prenex |
        relative-clauses | links | linkargs

// ZOhU: zo'o (態度詞) attitudinal modifier: humorously - dully - seriously. (幽默、不在意、認真)

// prenex : 前置量詞 (forall , exist, ....)
prenex<30> = terms ZOhU #

// 句子 = 項目 cu ... 謂詞尾巴
sentence<40> = [terms [CU #]] bridi-tail

// 子句 = 句子 | 前置量詞 子句
subsentence<41> = sentence | prenex subsentence

// gi'e : 且 logical connective: bridi-tail afterthought and.
// 謂詞尾巴 = bridi-tail-1 [stag] KE # bridi-tail ( 且 謂詞尾巴) *
bridi-tail<50> = bridi-tail-1 [stag] KE # bridi-tail
        [gihek [stag] KE # bridi-tail /KEhE#/ tail-terms]

bridi-tail-1<51> = bridi-tail-2 [gihek # bridi-tail-2 tail-terms] ...

// bo: short scope joiner; joins various constructs with shortest scope and right grouping
bridi-tail-2<52> = bridi-tail-3 [gihek [stag] BO # bridi-tail-2 tail-terms]

bridi-tail-3<53> = selbri tail-terms | gek-sentence

// ge: logical connective: forethought all but tanru-internal and (with gi).
gek-sentence<54> = gek subsentence gik subsentence tail-terms |
        [tag] KE # gek-sentence /KEhE#/ | NA # gek-sentence

tail-terms<71> = [terms] /VAU#/

terms<80> = terms-1 ...

// joi: non-logical connective: mixed conjunction; "and" meaning "mixed
// je: logical connective: tanru-internal afterthought and.
// pe'e:  marks the following connective as joining termsets.
terms-1<81> = terms-2 [PEhE # joik-jek terms-2] ...

// ce'e: links terms into an afterthought termset.
terms-2<82> = term [CEhE # term] ...

// ku:(end sumti) elidable terminator: end description, modal, or negator sumti;
// 項目： 填充者 | 包含指示語的填充者 | 一堆項目 | NA KU # ???
term<83> = sumti | (tag | FA #) (sumti | /KU#/) | termset | NA KU #

termset<85> = NUhI # gek terms /NUhU#/ gik terms /NUhU#/ | NUhI # terms /NUhU#/

// vu'o : (long scope relative) joins relative clause/phrase to complete complex or logically
sumti<90> = sumti-1 [VUhO # relative-clauses]

sumti-1<91> = sumti-2 [(ek | joik) [stag] KE # sumti /KEhE#/]

sumti-2<92> = sumti-3 [joik-ek sumti-3] ...

sumti-3<93> = sumti-4 [(ek | joik) [stag] BO # sumti-3]

sumti-4<94> = sumti-5 | gek sumti gik sumti-4

sumti-5<95> = [quantifier] sumti-6 [relative-clauses] |
        quantifier selbri /KU#/ [relative-clauses]

sumti-6<97> = (LAhE # | NAhE BO #) [relative-clauses] sumti /LUhU#/ |
        KOhA # | lerfu-string /BOI#/ | LA # [relative-clauses] CMENE ... # |
        (LA | LE) # sumti-tail /KU#/ | LI # mex /LOhO#/ |
        ZO any-word # | LU text /LIhU#/ | LOhU any-word ... LEhU # |
        ZOI any-word anything any-word #

sumti-tail<111> = [sumti-6 [relative-clauses]] sumti-tail-1 |
        relative-clauses sumti-tail-1

sumti-tail-1<112> = [quantifier] selbri [relative-clauses] | quantifier sumti

relative-clauses<121> = relative-clause [ZIhE # relative-clause] ...

relative-clause<122> = GOI # term /GEhU#/ | NOI # subsentence /KUhO#/

// 謂詞 = 謂詞1
selbri<130> = [tag] selbri-1

// 謂詞1 = 謂詞2 | NA # 謂詞
selbri-1<131> = selbri-2 | NA # selbri

// co : tanru inversion operator; "... of type ..."; allows modifier trailing sumti without sumti links.
// 謂詞2 = 謂詞3 (co # 謂詞2)?
selbri-2<132> = selbri-3 [CO # selbri-2]

// 謂詞3 = (謂詞4)*
selbri-3<133> = selbri-4 ...

// 謂詞4 = 謂詞5 (且 謂詞5 | ...)
selbri-4<134> = selbri-5
        [joik-jek selbri-5 | joik [stag] KE # selbri-3 /KEhE#/] ...

// 謂詞5 = 謂詞6 (且 ... 謂詞5)
selbri-5<135> = selbri-6 [(jek | joik) [stag] BO # selbri-5]

// 謂詞6 = 謂詞6 (且 ... 謂詞5)
selbri-6<136> = tanru-unit [BO # selbri-6] | [NAhE #] guhek selbri gik selbri-6

tanru-unit<150> = tanru-unit-1 [CEI # tanru-unit-1] ...

tanru-unit-1<151> = tanru-unit-2 [linkargs]

tanru-unit-2<152> = BRIVLA # | GOhA [RAhO] # | KE # selbri-3 /KEhE#/ |
        ME # sumti /MEhU#/ [MOI #] | (number | lerfu-string) MOI # |
        NUhA # mex-operator | SE # tanru-unit-2 | JAI # [tag] tanru-unit-2 |
        any-word (ZEI any-word) ... | NAhE # tanru-unit-2 |
        NU [NAI] # [joik-jek NU [NAI] #] ... subsentence /KEI#/

linkargs<160> = BE # term [links] /BEhO#/

links<161> = BEI # term [links]

quantifier<300> = number /BOI#/ | VEI # mex /VEhO#/

mex<310> = mex-1 [operator mex-1] ... | FUhA # rp-expression

mex-1<311> = mex-2 [BIhE # operator mex-1]

mex-2<312> = operand | [PEhO #] operator mex-2 ... /KUhE#/

rp-expression<330> = rp-operand rp-operand operator

rp-operand<332> = operand | rp-expression

operator<370> = operator-1
        [joik-jek operator-1 | joik [stag] KE # operator /KEhE#/] ...

operator-1<371> = operator-2 | guhek operator-1 gik operator-2 |
        operator-2 (jek | joik) [stag] BO # operator-1

operator-2<372> = mex-operator | KE # operator /KEhE#/

mex-operator<374> = SE # mex-operator | NAhE # mex-operator |
        MAhO # mex /TEhU#/ | NAhU # selbri /TEhU#/ | VUhU #

operand<381> = operand-1 [(ek | joik) [stag] KE # operand /KEhE#/]

operand-1<382> = operand-2 [joik-ek operand-2] ...

operand-2<383> = operand-3 [(ek | joik) [stag] BO # operand-2]

operand-3<385> = quantifier | lerfu-string /BOI#/ |
        NIhE # selbri /TEhU#/ | MOhE # sumti /TEhU#/ |
        JOhI # mex-2 ... /TEhU#/ | gek operand gik operand-3 |
        (LAhE # | NAhE BO #) operand /LUhU#/

number<812> = PA [PA | lerfu-word] ...

lerfu-string<817> = lerfu-word [PA | lerfu-word] ...

lerfu-word<987> = BY | any-word BU | LAU lerfu-word | TEI lerfu-string FOI

ek<802> = [NA] [SE] A [NAI]

gihek<818> = [NA] [SE] GIhA [NAI]

jek<805> = [NA] [SE] JA [NAI]

joik<806> = [SE] JOI [NAI] | interval | GAhO interval GAhO

interval<932> = [SE] BIhI [NAI]

joik-ek<421> = joik # | ek #

joik-jek<422> = joik # | jek #

gek<807> = [SE] GA [NAI] # | joik GI # | stag gik

guhek<808> = [SE] GUhA [NAI] #

gik<816> = GI [NAI] #

tag<491> = tense-modal [joik-jek tense-modal] ...

stag<971> = simple-tense-modal [(jek | joik) simple-tense-modal] ...

tense-modal<815> = simple-tense-modal # | FIhO # selbri /FEhU#/

simple-tense-modal<972> = [NAhE] [SE] BAI [NAI] [KI] |
        [NAhE] (time [space] | space [time]) & CAhA [KI] | KI | CUhE

time<1030> = ZI & time-offset ... & ZEhA [PU [NAI]] & interval-property ...

time-offset<1033> = PU [NAI] [ZI]

space<1040> = VA & space-offset ... & space-interval & (MOhI space-offset)

space-offset<1045> = FAhA [NAI] [VA]

space-interval<1046> = ((VEhA & VIhA) [FAhA [NAI]]) & space-int-props

space-int-props<1049> = (FEhE interval-property) ...

interval-property<1051> = number ROI [NAI] | TAhE [NAI] | ZAhO [NAI]

free<32> = SEI # [terms [CU #]] selbri /SEhU/ | SOI # sumti [sumti] /SEhU/ |
        vocative [relative-clauses] selbri [relative-clauses] /DOhU/ |
        vocative [relative-clauses] CMENE ... # [relative-clauses] /DOhU/ |
        vocative [sumti] /DOhU/ | (number | lerfu-string) MAI |
        TO text /TOI/ | XI # (number | lerfu-string) /BOI/ |
        XI # VEI # mex /VEhO/

vocative<415> = (COI [NAI]) ... & DOI

indicators<411> = [FUhE] indicator ...

indicator<413> =  (UI | CAI) [NAI] | Y | DAhO | FUhO


The following rules are non-formal:

word<1100> = [BAhE] any-word [indicators]

any-word = "any single word (no compound cmavo)"

anything = "any text at all, whether Lojban or not"
null<1101> = any-word SI | utterance SA | text SU

FAhO is a universal terminator and signals the end of parsable input.