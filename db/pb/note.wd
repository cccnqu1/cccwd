# 上課須知

## 學習方法

1. 必須有強烈的學習動機
2. 先看一些入門書籍
3. 懂得上網查詢 (google)
4. 遇到障礙的時候立刻問懂的人 (旁邊的人， facebook，老師）
5. 本課程開課前的一段討論 ： 程式人雜誌 -- <https://www.facebook.com/groups/programmerMagazine/permalink/1073920862624629/>
 * 重要摘錄： 某位網友 : 我就說一下我的經驗好了，我是專科體系出生的，以前我們學校是一年學2種程式語言，到了專四也學了七、八種程式語言，但沒有一種是自己真正熟悉、會用的，我曾經問我們班上最會寫程式的同學，要怎麼做才能像他一樣？他只教我幾個祕訣，用程式的角度去思考，觀察程式怎麼執行，先寫個小程式，再慢慢增加功能。說真的，我照我同學的方法去做，程式的功力就進步的很快，到了要做畢業專題時，就算是用老師沒教的程式語言，一樣也可以寫個好幾萬行的程式碼，順利做好專題。只要建立好程式的基礎觀念，就算程式語言再怎麼變，還是可以靈活運用...
6. 要有挫折容忍力，不要一個程式編不過寫不出來，就放棄了。
 * 如果有上述情形，卻又不願問不敢問不想問，那建議立刻轉系或退學。
7. 另外感謝網友提醒，這種做法有可能摧毀學生的自信心，造成自我實現的預言。
 * 为什么穷人的孩子更难以完成大学学业 -- <http://cn.nytstyle.com/education/20141127/t27graduation/>
 * 某些恐懼和焦慮情緒，以及對自身能力的懷疑，往往阻止學生實現自己的潛能。在升學過渡階段，比如高一或大一學年，這些情緒尤為致命。而在那些感覺自己受到某種特殊威脅或審視的學生群體（工程專業女生、第一代大學生，或常春藤盟校的非洲裔美國學生）中，此類情緒似乎特別有破壞力。
 * 當然，這些消極想法在每個人身上的表現形式有所不同，不過它們大多圍繞著兩個想法。一組想法跟「歸屬感」有關。升學過渡期的學生經常會深切地懷疑，自己是否真的屬於（或者終有一天會屬於）這個陌生的新學府。另一組想法跟「能力」有關。許多學生深信卡羅爾·德偉克所稱的「智力實體論」，即智力是一種固定質素，不可能通過練習或學習予以改善。所以，當這些學生遭遇一些可能顯示他們不夠聰明，或者不具備學術能力的蛛絲馬跡（比如某次測驗成績不理想）時，他們往往將其解讀為一個跡象，說明他們永遠也無法成功。對歸屬感和自身能力的疑慮經常相互強化，最終形成一種深切的無助感。這種無助感導致學生不願意採取任何改變現狀的行動。要是我不能變得更聰明，為什麼還要學習？要是沒有人願意跟我聊天，為什麼還要出門，試圖結識新朋友？過不了多久，這些令人洩氣的疑慮就會變成自我實現的預言。
 * 我的建議是，當你覺得自己學不會時，請一定要來找我談談，我們也可以一對一教學。
8. 老師知道各位都很忙，因為時間很少！
 * 大家還有物理微積分國英通識線性代數數位邏輯，然後還要練習毛毛蟲舞.....
 * 所以很多人回家沒時間練習，那就來學校上課時練習吧！
 * 記得不會的時候，一定要問同學，或者直接問我。


* <https://www.facebook.com/ccckmit/posts/10153174803571893>

```
學過程式的老手總覺得『程式非常簡單』，但是他們都忘記了當年自己在學程式的時候，為了一個bug 搞了很久，然後還失眠睡不著的情況.....
教大一學生程式設計，並沒有那麼容易的.......

我從來不預習，但是程式設計也幾乎沒上過課....基本上老師用講課的方式根本沒用.....程式就是要自己學，然後試試試....重點是當你卡關的時候，有人可以幫你解惑....教程式的老師，作用通常就是這個。
```

* <https://www.facebook.com/ccckmit/posts/10153174839256893>

```
很多人會說，DOS 很簡單，Shell 很簡單， Linux 很簡單， git 很簡單，.....

真的這麼簡單嗎？

這些『很簡單』的東西，其實都是花了很多天『用用用』才學會的，重點是你要架起來在日常生活中使用，那最後就會很簡單....

否則、光靠上課要教會這些東西，基本上是很難的.....
```

* <https://www.facebook.com/ccckmit/posts/10153174803571893>

```
某網友 : 個人很慶幸大學時,老師教資料結構採用了最簡單的方式,用板書一個個演算法,帶著大家扎實地Trace.自然地就學會了前人的思路及 debug 的技巧了.
```
## 入門學習資源

小學生都學得會，你一定可以

* <http://code.org/learn>
* <http://studio.code.org/hoc/1>
* <http://studio.code.org/>
* <http://studio.code.org/flappy/1>

## 入門書

* [矢澤久雄: if與else的思考術：程式設計邏輯腦的養成講座](http://www.books.com.tw/products/0010445551)

## 後記

對於我發的 [這個文](https://www.facebook.com/groups/programmerMagazine/permalink/1073920862624629/) 和 [那個文](https://www.facebook.com/ccckmit/posts/10153170376986893) ，正反兩方的意見都有，非常感謝！

不過一個老師採用的教法，其實是要適合老師本身的特性的，適合 A 老師的不見得適合 B 老師，適合 甲班的不見得適合乙班。

在這門課上我打算用翻轉是教學法，除了教學生一些基本操作和分享應用領域之外，大部分的時間都是自學，然後老師出題目給學生想和做。

我發現這樣的作法比較適合我，主要是因為當我單向講課時，學生其實大部分都打電動上網去了，真正有在聽的大約只有五分之一。

與其這樣，還不如用翻轉的方式，而且讓學生自己感受語言的特性之後，從中挑一種學習。

當然、對於那些沒有特別偏好的同學，我會推薦他們從 JavaScript 開始。

這門課分上下學期，上學期我會推薦 JavaScript，下學期我會推薦 C 。

應該大部分的學生都會以這個推薦順序學習才對，所以應該不會一下就要學五種語言，只是會一次就看到五種語言的應用，再來作決定就是了。

翻轉教學法我覺得還蠻適合用在程式設計課上面的，因為程式就是要去寫才會有感覺，但是回家會真的花時間努力寫的學生不多，所以乾脆讓他們在上課邊想邊寫，這樣老師也可以有很多時間去解答他們的問題。

有興趣的同學，回去再進一步更深入的學習，有幾門課我這樣做的結果，感覺不會比講課差。

至於很多人擔心大一是個適應期，一下就用這種方法，會造成學生不適應然後放棄。

其實、就我的經驗，在單向教學方式下放棄的學生比用翻轉教學法更多。

我認為大一是學習程式的黃金時光，對於那些輕易就放棄的同學，我想對他們說，堅持下去，找出適合你的學習法。

否則要一輩子和程式打交道，還不如提早放棄比較好！